import React, { useState } from 'react';

interface InsightAnalysisProps {
  analysis: string;
  title?: string;
}

const InsightAnalysis: React.FC<InsightAnalysisProps> = ({ 
  analysis, 
  title = "„Ç§„É≥„Çµ„Ç§„ÉàÂàÜÊûêÁµêÊûú" 
}) => {
  // Markdown„ÅÆË¶ãÂá∫„Åó„ÇíËß£Êûê„Åó„Å¶„Çª„ÇØ„Ç∑„Éß„É≥ÂàÜ„Åë„Åô„Çã
  const parseAnalysis = (text: string) => {
    // „Äå*„Äç„ÇíÂâäÈô§
    const cleanText = text.replace(/\*/g, '');
    
    const sections: { title: string; content: string; id: string }[] = [];
    const lines = cleanText.split('\n');
    let currentSection: { title: string; content: string; id: string } | null = null;

    lines.forEach((line) => {
      // ## „ÅßÂßã„Åæ„ÇãË¶ãÂá∫„Åó„ÇíÊ§úÂá∫
      if (line.startsWith('## ')) {
        if (currentSection && currentSection.content.trim()) {
          sections.push(currentSection);
        }
        const title = line.replace('## ', '').trim();
        const id = title.toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '-');
        currentSection = { title, content: '', id };
      } else if (currentSection) {
        currentSection.content += line + '\n';
      } else if (line.trim()) {
        // ÊúÄÂàù„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥ÔºàË¶ãÂá∫„Åó„Å™„ÅóÔºâ
        if (!currentSection) {
          currentSection = { title: 'Ê¶ÇË¶Å', content: line + '\n', id: 'overview' };
        } else {
          currentSection.content += line + '\n';
        }
      }
    });

    if (currentSection && currentSection.content.trim()) {
      sections.push(currentSection);
    }

    return sections.filter(section => section.content.trim().length > 0);
  };

  const sections = parseAnalysis(analysis);

  const getSectionIcon = (title: string) => {
    if (title.includes('„Éô„Éç„Éï„Ç£„ÉÉ„Éà') || title.includes('ÂÖ±ÊÑü')) return 'üíù';
    if (title.includes('Ë≥ºË≤∑') || title.includes('Ë≥ºÂÖ•')) return 'üõí';
    if (title.includes('ÁêÜÁî±') || title.includes('ÈòªÂÆ≥')) return '‚ö†Ô∏è';
    if (title.includes('„Ç§„É≥„Çµ„Ç§„Éà') || title.includes('Ë£èÂÅ¥')) return 'üîç';
    if (title.includes('Á´∂Âêà') || title.includes('ÊØîËºÉ')) return '‚öñÔ∏è';
    if (title.includes('„Çø„Éº„Ç≤„ÉÉ„Éà') || title.includes('È°ßÂÆ¢')) return 'üéØ';
    if (title.includes('‰æ°Ê†º')) return 'üí∞';
    if (title.includes('„Éí„Éº„Éà„Éû„ÉÉ„Éó') || title.includes('ÂõõË±°Èôê')) return 'üìä';
    if (title.includes('Êà¶Áï•') || title.includes('Á§∫ÂîÜ')) return 'üí°';
    return 'üìã';
  };

  const getSectionColor = (index: number) => {
    const colors = [
      'border-blue-200 bg-blue-50',
      'border-green-200 bg-green-50',
      'border-yellow-200 bg-yellow-50',
      'border-red-200 bg-red-50',
      'border-purple-200 bg-purple-50',
      'border-indigo-200 bg-indigo-50',
      'border-pink-200 bg-pink-50',
      'border-gray-200 bg-gray-50',
      'border-orange-200 bg-orange-50'
    ];
    return colors[index % colors.length];
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">{title}</h2>
        <p className="text-gray-600">ÂêÑÈ†ÖÁõÆ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Ë©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô</p>
      </div>

      {sections.length === 0 ? (
        <div className="bg-white p-6 rounded-lg border">
          <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
            {analysis}
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          {sections.map((section, index) => (
            <div
              key={section.id}
              className={`border-2 rounded-xl p-6 ${getSectionColor(index)}`}
            >
              <div className="flex items-center space-x-3 mb-4">
                <span className="text-2xl">{getSectionIcon(section.title)}</span>
                <h3 className="font-semibold text-gray-900 text-lg">
                  {section.title}
                </h3>
              </div>
              
              <div className="text-sm text-gray-700 leading-relaxed whitespace-pre-wrap">
                {section.content.trim()}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default InsightAnalysis;
